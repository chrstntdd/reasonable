// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function fizzBuzz(param) {
  for(var i = 1; i <= 100; ++i){
    var s = String(i);
    var match = i % 3;
    var match$1 = i % 5;
    var exit = 0;
    if (match !== 0) {
      exit = 1;
    } else if (match$1 !== 0) {
      exit = 1;
    }
    if (exit === 1) {
      if (match$1 !== 0) {
        if (match !== 0) {
          ;
        } else {
          s + " => Buzz";
        }
      } else {
        s + " => Fizz";
      }
    }
    
  }
  return /* () */0;
}

function fibonacci(n) {
  var a = 0;
  var b = 1;
  for(var _for = 2; _for <= n; ++_for){
    var tmp = a;
    a = b;
    b = a + tmp | 0;
  }
  return b;
}

var StringMap = $$Map.Make([$$String.compare]);

function naiveFibRecur(n) {
  var match = n <= 1;
  if (match) {
    return n;
  } else {
    return naiveFibRecur(n - 1 | 0) + naiveFibRecur(n - 2 | 0) | 0;
  }
}

function fibonacciRecur(n) {
  var inner = function (num, cache) {
    var match = num <= 1;
    if (match) {
      return num;
    } else {
      var exit = 0;
      var res;
      try {
        res = Curry._2(StringMap[/* find */21], String(num), cache[0]);
        exit = 1;
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          var result = inner(num - 1 | 0, cache) + inner(num - 2 | 0, cache) | 0;
          cache[0] = Curry._3(StringMap[/* add */3], String(num), String(result), cache[0]);
          return result;
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        return Caml_format.caml_int_of_string(res);
      }
      
    }
  };
  return inner(n, /* record */[/* contents */StringMap[/* empty */0]]);
}

exports.fizzBuzz = fizzBuzz;
exports.fibonacci = fibonacci;
exports.StringMap = StringMap;
exports.naiveFibRecur = naiveFibRecur;
exports.fibonacciRecur = fibonacciRecur;
/* StringMap Not a pure module */
